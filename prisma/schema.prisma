// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String?
  email        String        @unique
  role         Role          @default(JOB_SEEKER)
  bio          String?
  photo        String?
  phone        String?
  gender       Gender
  passwordHash String?
  applications Application[]
  company      Company?      @relation(fields: [companyId], references: [id])
  companyId    String?
}

model Company {
  id                 String    @id @default(cuid())
  name               String
  description        String?
  website            String?
  logo               String?
  registrationNumber String?   @unique
  location           Location?
  users              User[]
  jobs               Job[]
}

model Job {
  id                    String                 @id @default(cuid())
  title                 String
  description           String?
  employmentType        EmploymentType
  salary                Float?
  postedDate            DateTime?
  status                JobStatus              @default(ACTIVE)
  location              Location?
  educationRequirements EducationRequirement[]
  applications          Application[]
  skills                Skill[]
  experienceLevel       ExperienceLevel
  company               Company                @relation(fields: [companyId], references: [id])
  companyId             String
  category              JobCategory            @relation(fields: [categoryId], references: [id])
  categoryId            String
}

model Location {
  id           String   @id @default(cuid())
  addressLine1 String
  addressLine2 String?
  city         String
  postalCode   String?
  latitude     Float?
  longitude    Float?
  company      Company? @relation(fields: [companyId], references: [id])
  companyId    String?  @unique
  job          Job?     @relation(fields: [jobId], references: [id])
  jobId        String?  @unique
}

model JobCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  jobs        Job[]
}

model Skill {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  jobs        Job[]
}

model EducationRequirement {
  id           String  @id @default(cuid())
  degree       String
  fieldOfStudy String?
  job          Job?    @relation(fields: [jobId], references: [id])
  jobId        String?
}

model Application {
  id          String            @id @default(cuid())
  resume      String
  coverLetter String
  appliedOn   DateTime          @default(now())
  status      ApplicationStatus @default(PENDING)
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  job         Job               @relation(fields: [jobId], references: [id])
  jobId       String
}

enum Role {
  SYSTEM_ADMIN
  COMPANY_ADMIN
  RECRUITER
  JOB_SEEKER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum JobStatus {
  DRAFT
  ACTIVE
  COMPLETE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum ExperienceLevel {
  NONE
  FRESHER
  INTERMEDIATE
  EXPERT
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
